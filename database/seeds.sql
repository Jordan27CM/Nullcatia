INSERT INTO territorios (nombre, descripcion) VALUES
('Bosques Binarios', 'Un vasto territorio donde los árboles almacenan datos en sus hojas binarias. Cada hoja representa un bit, y el viento susurra algoritmos de búsqueda. Los gatos aquí aprenden a navegar estructuras de datos arbóreas y resolver problemas de recorrido.'),
('Ríos de Paquetes', 'Corrientes de datos que fluyen constantemente, llevando información encapsulada en paquetes TCP/IP. Los gatos pescadores atrapan paquetes perdidos y los reencaminan a sus destinos correctos.'),
('Montañas de Índices', 'Picos escarpados donde cada roca es un índice de base de datos. Los gatos escaladores optimizan consultas creando nuevos índices y manteniendo los existentes.'),
('Praderas de Pila', 'Llanuras infinitas donde cada brizna de hierba representa un frame en la pila de llamadas. Los gatos pastores gestionan el flujo de ejecución y previenen desbordamientos.'),
('Archipiélago de APIs', 'Un conjunto de islas donde cada una expone un servicio diferente. Los gatos navegantes documentan endpoints y aseguran la interoperabilidad entre sistemas.'),
('Cuevas de Caché', 'Sistema de cavernas donde cada estalactita almacena datos en memoria para acceso rápido. Los gatos guardianes implementan estrategias LRU y FIFO.'),
('Océanos de Objetos', 'Aguas profundas donde cada gota es un objeto con propiedades y métodos. Los gatos marineros dominan la programación orientada a objetos y los patrones de diseño.'),
('Llanuras de Logs', 'Extensiones planas donde cada movimiento queda registrado. Los gatos rastreadores analizan trazas para diagnosticar problemas y mejorar el rendimiento.'),
('Valles de Versiones', 'Depresiones geográficas que representan diferentes versiones de software. Los gatos viajeros manejan sistemas de control de versiones y resuelven conflictos.'),
('Desiertos de Null', 'Áridas extensiones donde los valores nulos deambulan sin propósito. Los gatos ermitaños enseñan técnicas para manejar casos especiales y valores faltantes.'),
('Cañones de Código', 'Profundas gargantas talladas por corrientes de código fuente. Los gatos programadores refactorizan el paisaje para mejorar legibilidad y mantenibilidad.'),
('Volcanes de Variables', 'Montañas en erupción que expulsan variables sin declarar. Los gatos alquimistas capturan estas variables y les asignan tipos y alcances adecuados.');

INSERT INTO clanes (nombre, territorio_id, descripcion) VALUES
('Clan Asyncwhiskers', 1, 'Maestros de la programación asíncrona, enseñan a los gatitos a manejar promesas y callbacks sin bloquear el hilo principal. Su lema: "Nunca esperes, siempre then".'),
('Clan Callbacktail', 1, 'Guardianes de las funciones callback, mantienen viejas tradiciones pero luchan por adaptarse a las nuevas promesas. Conocidos por su paciencia infinita.'),
('Clan Promisepaw', 2, 'Innovadores que han abandonado el callback hell, enseñan a encadenar then() y manejar errores con catch(). Su templo tiene forma de cadena de promesas.'),
('Clan Awaitclaw', 2, 'Los más modernos, prefieren la sintaxis async/await. Consideran que el código sincrónico es más legible y enseñan a usarlo correctamente.'),
('Clan Eventloophole', 3, 'Expertos en el bucle de eventos de Node.js. Pueden explicar el orden exacto de ejecución de microtasks y macrotasks.'),
('Clan Middlewhisker', 3, 'Guardianes del middleware, interceptan cada petición para aplicar lógica transversal como autenticación y logging.'),
('Clan Routerfang', 4, 'Encargados de mapear URLs a controladores. Conocen cada ruta del laberinto y mantienen la navegación consistente.'),
('Clan Templatetail', 4, 'Maestros de las vistas, generan HTML dinámico combinando datos con plantillas. Dominan EJS, Pug y Handlebars.'),
('Clan Schemawhisker', 5, 'Diseñadores de bases de datos, crean esquemas normalizados y optimizados. Saben cuándo romper las reglas de normalización por rendimiento.'),
('Clan Queryclaw', 5, 'Escriben consultas SQL eficientes y protegen contra inyecciones. Su ritual más sagrado es el EXPLAIN ANALYZE.'),
('Clan Transactail', 6, 'Garantizan la integridad ACID. Manejan transacciones complejas y saben cuándo hacer COMMIT o ROLLBACK.'),
('Clan Indexpaw', 6, 'Especialistas en índices, conocen el arte del B-tree y cuándo crear índices compuestos. Su biblioteca contiene estadísticas de selectividad.'),
('Clan Cachewhisker', 7, 'Gestionan memorias caché para mejorar el rendimiento. Implementan estrategias de invalidación y saben cuándo usar Redis.'),
('Clan Sessionscratcher', 7, 'Manejan el estado entre peticiones. Conocen todos los secretos de las cookies y los tokens JWT.'),
('Clan Errorhandler', 8, 'Capturan y procesan errores elegante. Su biblioteca contiene registros de todos los códigos de estado HTTP.'),
('Clan Validatetail', 8, 'Aseguran la calidad de los datos de entrada. Conocen expresiones regulares complejas y esquemas de validación.'),
('Clan Testclaw', 9, 'Escriben pruebas unitarias e integrales. Su dojo tiene un altar dedicado a la cobertura de código.'),
('Clan Mockwhisker', 9, 'Crean mocks y stubs para pruebas. Pueden simular cualquier servicio externo con precisión.'),
('Clan Deploypaw', 10, 'Encargados de llevar código a producción. Manejan CI/CD pipelines y saben resolver conflictos de dependencias.'),
('Clan Scaletail', 10, 'Diseñan sistemas que crecen horizontalmente. Conocen los secretos del balanceo de carga y la autoescalabilidad.'),
('Clan Docwhisker', 11, 'Mantienen documentación actualizada. Generan Swagger/OpenAPI y aseguran que los comentarios JSDoc sean precisos.'),
('Clan Debugclaw', 11, 'Cazan bugs con la precisión de un depredador. Dominan herramientas de debugging y profiling.'),
('Clan Legacywhisker', 12, 'Mantienen código antiguo funcionando. Pueden descifrar código spaghetti y refactorizarlo sin romper nada.');

INSERT INTO gatos (raza, nombre, clan_id, fecha_nacimiento) VALUES
('Siamés', 'Felix Socketpaw', 1, '2020-03-15'),
('Persa', 'Serafina Cachewhisker', 2, '2019-07-22'),
('Maine Coon', 'Captain Middleware', 3, '2018-11-05'),
('Bengalí', 'Ajax Whisperpaw', 4, '2021-01-30'),
('Azul Ruso', 'Nova Schemaforge', 5, '2019-05-18'),
('Sphynx', 'Echo Testclaw', 6, '2020-09-12'),
('Ragdoll', 'Orion Rollback', 7, '2018-12-25'),
('British Shorthair', 'Vega Docstring', 8, '2021-02-14'),
('Abisinio', 'Sparkle Templatetail', 9, '2020-06-08'),
('Birmano', 'Luna Styleshade', 10, '2019-08-03'),
('Scottish Fold', 'Pixel Purrfect', 11, '2021-04-17'),
('Manx', 'Byte Guardian', 12, '2018-10-31'),
('Siberiano', 'Async Whiskers', 1, '2020-07-19'),
('Balines', 'Callback Tail', 2, '2019-11-21'),
('Oriental', 'Promise Paw', 3, '2021-03-02'),
('Tonkinés', 'Await Claw', 4, '2020-05-11'),
('Angora', 'Event Loop', 5, '2018-09-27'),
('Burmés', 'Middle Whisker', 6, '2021-01-08'),
('Cornish Rex', 'Router Fang', 7, '2019-04-23'),
('Devon Rex', 'Template Tail', 8, '2020-08-16'),
('Himalayo', 'Schema Whisker', 9, '2018-12-09'),
('Javanés', 'Query Claw', 10, '2021-05-28'),
('Korat', 'Transac Tail', 11, '2019-10-14'),
('LaPerm', 'Index Paw', 12, '2020-02-07'),
('Munchkin', 'Cache Whisker', 1, '2018-07-30'),
('Noruego', 'Session Scratcher', 2, '2021-06-12'),
('Ocicat', 'Error Handler', 3, '2019-09-25'),
('Peterbald', 'Validate Tail', 4, '2020-11-18'),
('Pixiebob', 'Test Claw', 5, '2018-08-21'),
('Savannah', 'Mock Whisker', 6, '2021-07-04'),
('Selkirk Rex', 'Deploy Paw', 7, '2019-12-17'),
('Singapura', 'Scale Tail', 8, '2020-04-29'),
('Somalí', 'Doc Whisker', 9, '2018-06-13');

INSERT INTO pergaminos (titulo, contenido) VALUES
('El Arte de las Promesas', 'Tratado completo sobre cómo encadenar promesas correctamente, manejar errores y evitar el callback hell. Incluye ejemplos de Promise.all(), Promise.race() y técnicas avanzadas de manejo de concurrencia.'),
('Middleware: La Barrera Protectora', 'Guía detallada sobre cómo implementar middleware en Express.js, incluyendo autenticación, logging, compresión y manejo de errores. Explica el orden de ejecución y cómo modificar el request/response.'),
('RESTful Paths del Saber', 'Documentación exhaustiva sobre diseño de APIs REST, convenciones de nombrado, códigos de estado HTTP y versionamiento. Incluye ejemplos de buenas y malas prácticas.'),
('El Libro de los Índices Perdidos', 'Compendio de estrategias de indexación en MySQL, cuándo crear índices, cómo analizar consultas con EXPLAIN y resolver problemas de rendimiento.'),
('Transacciones: Todo o Nada', 'Manual avanzado sobre transacciones ACID en MySQL, manejo de isolation levels, deadlocks y patrones para operaciones atómicas complejas.'),
('El Camino del Template Engine', 'Estudio comparativo de motores de plantillas como EJS, Pug y Handlebars, con ejemplos de layouts, parciales y helpers personalizados.'),
('Validación: El Primer Escudo', 'Técnicas completas para validar datos de entrada, desde expresiones regulares hasta librerías como express-validator. Incluye sanitización y normalización.'),
('Pruebas Unitarias para Guerreros', 'Metodología para escribir pruebas efectivas con Jest y Supertest, incluyendo mocks, stubs y medición de cobertura de código.'),
('El Secreto del Pool de Conexiones', 'Configuración óptima de pools de conexiones en mysql2, manejo de timeouts, reconexiones y estrategias para alta concurrencia.'),
('Caché: Memoria Efímera', 'Implementación de sistemas de caché con Redis, estrategias de invalidación, TTL y patrones como cache-aside y write-through.'),
('JWT: El Token Sagrado', 'Guía completa sobre autenticación con JSON Web Tokens, generación, verificación, refresh tokens y manejo de seguridad.'),
('WebSockets: Comunicación en Tiempo Real', 'Tutorial sobre implementación de WebSockets con Socket.io para aplicaciones en tiempo real como chats y notificaciones.'),
('El Arte de la Documentación', 'Cómo escribir documentación API efectiva con Swagger/OpenAPI y comentarios JSDoc para generación automática de docs.'),
('Patrones de Diseño para Felinos', 'Explicación de patrones como Singleton, Factory, Observer y cómo aplicarlos en Node.js para código mantenible.'),
('Error Handling: Caer con Elegancia', 'Sistema centralizado de manejo de errores en Express, creación de errores personalizados y logging estructurado.'),
('Seguridad: Defensas del Reino', 'Guía completa de seguridad web: protección contra XSS, CSRF, SQL injection, rate limiting y headers de seguridad.'),
('El Camino del ORM', 'Comparación entre consultas SQL puras y ORMs como Sequelize, ventajas, desventajas y casos de uso para cada enfoque.'),
('Microservicios: Dividir para Conquistar', 'Arquitectura de microservicios en Node.js, comunicación entre servicios, API gateways y manejo de fallas.'),
('GraphQL: La Nueva Era', 'Introducción a GraphQL como alternativa a REST, diseño de schemas, resolvers y optimización con DataLoader.'),
('Docker: Contenedores para Viajeros', 'Empaquetado de aplicaciones Node.js en contenedores Docker, optimización de imágenes y orquestación básica.'),
('CI/CD: El Flujo Sagrado', 'Implementación de pipelines de integración y despliegue continuo con GitHub Actions, incluyendo testing y despliegues automáticos.'),
('Logging: Las Huellas del Pasado', 'Sistemas de logging estructurado con Winston, transporte a archivos y sistemas externos, y correlación de logs.'),
('Performance: El Arte de la Velocidad', 'Técnicas de optimización en Node.js, profiling, identificación de cuellos de botella y herramientas como Clinic.js.'),
('Serverless: Sin Servidor que Mantener', 'Desarrollo de funciones serverless con AWS Lambda, ventajas, limitaciones y casos de uso adecuados.'),
('Webhooks: Mensajeros Asíncronos', 'Implementación y consumo de webhooks, verificación de firma y manejo de reintentos para fallos.'),
('El Misterio del Event Loop', 'Explicación profunda del event loop en Node.js, fases, nextTick, setImmediate y cómo afecta al rendimiento.'),
('TypeScript: Tipos para el Sabio', 'Introducción a TypeScript en Node.js, definición de tipos, interfaces y ventajas para proyectos a gran escala.'),
('gRPC: Comunicación Binaria', 'Implementación de APIs con gRPC para comunicación eficiente entre servicios, comparación con REST y GraphQL.'),
('Kubernetes: Orquestación Felina', 'Despliegue de aplicaciones Node.js en Kubernetes, manejo de pods, servicios y autoescalado.'),
('El Libro de las Buenas Prácticas', 'Compendio de convenciones de código, estructura de proyectos y principios SOLID aplicados a Node.js.');

INSERT INTO clan_pergamino (clan_id, pergamino_id) VALUES
(1, 1),
(3, 1), 
(4, 1),
(2, 2),
(6, 2),
(7, 3), 
(9, 4),
(10, 4),
(12, 4),
(11, 5),
(8, 6),
(16, 7),
(17, 8),
(18, 8),
(1, 9),
(13, 10),
(14, 11),
(15, 12), 
(20, 13),
(5, 14),
(15, 15),
(16, 16);
